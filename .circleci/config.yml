step-restore-cache: &step-restore-cache
  restore_cache:
    keys:
      - v1-dependencies-{{ arch }}-{{ checksum "yarn.lock" }}

steps-test: &steps-test
  steps:
    - checkout
    - *step-restore-cache
    - run:
        name: Install python2 on macos
        command: |
          if [ "`uname`" == "Darwin" ]; then
            if [ ! -f "python-downloads/python-2.7.18-macosx10.9.pkg" ]; then
              mkdir python-downloads
              echo 'Downloading Python 2.7.18'
              curl -O https://dev-cdn.electronjs.org/python/python-2.7.18-macosx10.9.pkg
              mv python-2.7.18-macosx10.9.pkg python-downloads
            else
              echo 'Using Python install from cache'
            fi
            sudo installer -pkg python-downloads/python-2.7.18-macosx10.9.pkg -target /
          fi
    - run:
        name: Install Node
        command: |
          case "$(uname -s)" in
            Darwin)
              curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
              export NVM_DIR="$HOME/.nvm"
              [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
              nvm install 18
              nvm alias default 18
              echo 'export NVM_DIR=${HOME}/.nvm' >> $BASH_ENV
              echo "[ -s '${NVM_DIR}/nvm.sh' ] && . '${NVM_DIR}/nvm.sh'" >> $BASH_ENV
              ;;
            Windows*|CYGWIN*|MINGW*|MSYS*)
              nvm install 18.13.0
              nvm use 18.13.0
              ;;
          esac
    - run: yarn install --frozen-lockfile
    - save_cache:
        paths:
          - node_modules
        key: v1-dependencies-{{ arch }}-{{ checksum "yarn.lock" }}
    - run: yarn run lint
    - run:
        name: Tests with code coverage
        command: yarn run coverage
        environment:
          DEBUG: electron-rebuild
    - run: yarn run codecov

version: 2.1
orbs:
  win: circleci/windows@5.0.0
  cfa: continuousauth/npm@1.0.2
jobs:
  test-linux-14:
    docker:
      - image: cimg/node:14.20
    <<: *steps-test
  test-linux-16:
    docker:
      - image: cimg/node:16.18
    <<: *steps-test
  test-mac:
    macos:
      xcode: '13.3.0'
    <<: *steps-test
  test-windows:
    executor:
      name: win/server-2019
      shell: bash.exe
    environment:
      GYP_MSVS_VERSION: '2019'
    <<: *steps-test

workflows:
  test_and_release:
    # Run the test jobs first, then the release only when all the test jobs are successful
    jobs:
      - test-linux-16
      - test-linux-14
      - test-mac
      - test-windows
      - cfa/release:
          requires:
            - test-linux-16
            - test-linux-14
            - test-mac
            - test-windows
          filters:
            branches:
              only:
                - main
          context: cfa-release
